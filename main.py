import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler, 
    MessageHandler, 
    CallbackContext, 
    CallbackQueryHandler,
    filters
)
import asyncio
from googletrans import Translator
from datetime import datetime
import json
import os
from threading import Timer as ThreadTimer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CARDS_FILE = 'memory_cards.json'
CALENDAR_FILE = 'calendar_events.json'
LINKS_FILE = 'useful_links.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
def load_data(filename):
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã
def save_data(data, filename):
    with open(filename, 'w') as f:
        json.dump(data, f, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if not os.path.exists(CARDS_FILE):
    save_data({}, CARDS_FILE)
if not os.path.exists(CALENDAR_FILE):
    save_data({}, CALENDAR_FILE)
if not os.path.exists(LINKS_FILE):
    save_data({}, LINKS_FILE)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –ö–ª–∞—Å—Å —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ Pomodoro —Ç–∞–π–º–µ—Ä–∞
class PomodoroTimer:
    def __init__(self, context: CallbackContext, chat_id):
        self.context = context
        self.chat_id = chat_id
        self.timer = None
        self.loop = asyncio.get_event_loop()  # –ü–æ–ª—É—á–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π

    def start(self, minutes):
        if self.timer is not None:
            self.timer.cancel()
        self.timer = ThreadTimer(minutes * 60, self.time_up)
        self.timer.start()
        asyncio.run_coroutine_threadsafe(
            self.context.bot.send_message(
                chat_id=self.chat_id,
                text=f"–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç. –Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã–π–¥–µ—Ç!"
            ),
            self.loop  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∑–¥–µ—Å—å
        )

    def time_up(self):
        asyncio.run_coroutine_threadsafe(
            self.context.bot.send_message(
                chat_id=self.chat_id,
                text="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!"
            ),
            self.loop
        )
        self.timer = None
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if self.chat_id in active_timers:
            del active_timers[self.chat_id]

    def cancel(self):
        if self.timer is not None:
            self.timer.cancel()
            asyncio.run_coroutine_threadsafe(
                self.context.bot.send_message(
                    chat_id=self.chat_id,
                    text="–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω."
                ),
                self.loop
            )
            self.timer = None
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            if self.chat_id in active_timers:
                del active_timers[self.chat_id]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
active_timers = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üî¢ /calculator - –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
        "üìö /cards - –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üåç /translate - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ (—Ä—É—Å—Å–∫–∏–π ‚Üí –∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–Ω–µ–º–µ—Ü–∫–∏–π/–∫–∏—Ç–∞–π—Å–∫–∏–π)\n"
        "üìÖ /calendar - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "‚è±Ô∏è /timer - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä (20 –∏–ª–∏ 40 –º–∏–Ω—É—Ç)\n"
        "üîó /links - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "‚ÑπÔ∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üî¢ /calculator - –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
        "üìö /cards - –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üåç /translate - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ (—Ä—É—Å—Å–∫–∏–π ‚Üí –∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–Ω–µ–º–µ—Ü–∫–∏–π/–∫–∏—Ç–∞–π—Å–∫–∏–π)\n"
        "üìÖ /calendar - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "‚è±Ô∏è /timer - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä (20 –∏–ª–∏ 40 –º–∏–Ω—É—Ç)\n"
        "üîó /links - –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "‚ÑπÔ∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def calculator(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    keyboard = [
        [
            InlineKeyboardButton("7", callback_data='7'),
            InlineKeyboardButton("8", callback_data='8'),
            InlineKeyboardButton("9", callback_data='9'),
            InlineKeyboardButton("/", callback_data='/'),
        ],
        [
            InlineKeyboardButton("4", callback_data='4'),
            InlineKeyboardButton("5", callback_data='5'),
            InlineKeyboardButton("6", callback_data='6'),
            InlineKeyboardButton("*", callback_data='*'),
        ],
        [
            InlineKeyboardButton("1", callback_data='1'),
            InlineKeyboardButton("2", callback_data='2'),
            InlineKeyboardButton("3", callback_data='3'),
            InlineKeyboardButton("-", callback_data='-'),
        ],
        [
            InlineKeyboardButton("0", callback_data='0'),
            InlineKeyboardButton(".", callback_data='.'),
            InlineKeyboardButton("=", callback_data='='),
            InlineKeyboardButton("+", callback_data='+'),
        ],
        [
            InlineKeyboardButton("C", callback_data='C'),
            InlineKeyboardButton("‚å´", callback_data='‚å´'),
        ],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:\n0', reply_markup=reply_markup)

async def calculator_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()

    current_text = query.message.text.split('\n')[-1]
    button_data = query.data

    if button_data == 'C':
        new_text = '0'
    elif button_data == '‚å´':
        new_text = current_text[:-1] if len(current_text) > 1 else '0'
    elif button_data == '=':
        try:
            new_text = str(eval(current_text))
        except:
            new_text = '–û—à–∏–±–∫–∞'
    else:
        new_text = current_text + button_data if current_text != '0' else button_data

    await query.edit_message_text(text=f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:\n{new_text}", reply_markup=query.message.reply_markup)

async def cards_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–∞—Ä—Ç–æ—á–µ–∫."""
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data='add_card')],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data='view_cards')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data='delete_card')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ú–µ–Ω—é –∫–∞—Ä—Ç–æ—á–µ–∫:', reply_markup=reply_markup)

async def cards_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫."""
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    cards_data = load_data(CARDS_FILE)

    if query.data == 'add_card':
        context.user_data['awaiting_card'] = True
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü–µ—Ä–µ–¥: [–≤–æ–ø—Ä–æ—Å]\n–ó–∞–¥: [–æ—Ç–≤–µ—Ç]")
    elif query.data == 'view_cards':
        if user_id in cards_data and cards_data[user_id]:
            cards_list = "\n\n".join([f"–ü–µ—Ä–µ–¥: {card['front']}\n–ó–∞–¥: {card['back']}" for card in cards_data[user_id]])
            await query.edit_message_text(text=f"–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n\n{cards_list}")
        else:
            await query.edit_message_text(text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
    elif query.data == 'delete_card':
        if user_id in cards_data and cards_data[user_id]:
            keyboard = [[InlineKeyboardButton(card['front'], callback_data=f"delete_{idx}")] 
                       for idx, card in enumerate(cards_data[user_id])]
            keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_delete')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        else:
            await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    elif query.data.startswith('delete_'):
        idx = int(query.data.split('_')[1])
        del cards_data[user_id][idx]
        save_data(cards_data, CARDS_FILE)
        await query.edit_message_text(text="–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    elif query.data == 'cancel_delete':
        await query.edit_message_text(text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def handle_card_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫."""
    if 'awaiting_card' in context.user_data and context.user_data['awaiting_card']:
        user_id = str(update.message.from_user.id)
        text = update.message.text

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        try:
            front = text.split('–ü–µ—Ä–µ–¥:')[1].split('–ó–∞–¥:')[0].strip()
            back = text.split('–ó–∞–¥:')[1].strip()
        except:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n–ü–µ—Ä–µ–¥: [–≤–æ–ø—Ä–æ—Å]\n–ó–∞–¥: [–æ—Ç–≤–µ—Ç]")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        cards_data = load_data(CARDS_FILE)
        if user_id not in cards_data:
            cards_data[user_id] = []

        cards_data[user_id].append({
            'front': front,
            'back': back,
            'created_at': str(datetime.now())
        })

        save_data(cards_data, CARDS_FILE)
        await update.message.reply_text("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        context.user_data['awaiting_card'] = False

async def translate_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞."""
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data='ru_en')],
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π ‚Üí –ù–µ–º–µ—Ü–∫–∏–π", callback_data='ru_de')],
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π ‚Üí –ö–∏—Ç–∞–π—Å–∫–∏–π", callback_data='ru_zh')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:', reply_markup=reply_markup)

async def translate_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞."""
    query = update.callback_query
    await query.answer()

    lang_map = {
        'ru_en': ('ru', 'en'),
        'ru_de': ('ru', 'de'),
        'ru_zh': ('ru', 'zh-cn')
    }

    src, dest = lang_map[query.data]
    context.user_data['translation_direction'] = (src, dest)
    await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–æ: {src.upper()} ‚Üí {dest.upper()}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

async def handle_translation_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."""
    if 'translation_direction' in context.user_data:
        src, dest = context.user_data['translation_direction']
        text = update.message.text

        try:
            translation = translator.translate(text, src=src, dest=dest)
            await update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥:\n\n{translation.text}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

        context.user_data.pop('translation_direction', None)

async def calendar_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='add_event')],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è", callback_data='view_events')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='delete_event')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ú–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', reply_markup=reply_markup)

async def calendar_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    calendar_data = load_data(CALENDAR_FILE)

    if query.data == 'add_event':
        context.user_data['awaiting_event'] = True
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–î–∞—Ç–∞: –ì–ì–ì–ì-–ú–ú-–î–î\n–°–æ–±—ã—Ç–∏–µ: [–æ–ø–∏—Å–∞–Ω–∏–µ]\n\n–ü—Ä–∏–º–µ—Ä:\n–î–∞—Ç–∞: 2023-12-25\n–°–æ–±—ã—Ç–∏–µ: –†–æ–∂–¥–µ—Å—Ç–≤–æ")
    elif query.data == 'view_events':
        if user_id in calendar_data and calendar_data[user_id]:
            events_list = "\n\n".join([f"–î–∞—Ç–∞: {event['date']}\n–°–æ–±—ã—Ç–∏–µ: {event['description']}" for event in calendar_data[user_id]])
            await query.edit_message_text(text=f"–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n{events_list}")
        else:
            await query.edit_message_text(text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    elif query.data == 'delete_event':
        if user_id in calendar_data and calendar_data[user_id]:
            keyboard = [[InlineKeyboardButton(f"{event['date']} - {event['description']}", callback_data=f"delete_event_{idx}")] 
                       for idx, event in enumerate(calendar_data[user_id])]
            keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_delete_event')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        else:
            await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    elif query.data.startswith('delete_event_'):
        idx = int(query.data.split('_')[2])
        del calendar_data[user_id][idx]
        save_data(calendar_data, CALENDAR_FILE)
        await query.edit_message_text(text="–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    elif query.data == 'cancel_delete_event':
        await query.edit_message_text(text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def handle_event_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π."""
    if 'awaiting_event' in context.user_data and context.user_data['awaiting_event']:
        user_id = str(update.message.from_user.id)
        text = update.message.text

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        try:
            date_str = text.split('–î–∞—Ç–∞:')[1].split('–°–æ–±—ã—Ç–∏–µ:')[0].strip()
            description = text.split('–°–æ–±—ã—Ç–∏–µ:')[1].strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(date_str, '%Y-%m-%d')
        except:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n–î–∞—Ç–∞: –ì–ì–ì–ì-–ú–ú-–î–î\n–°–æ–±—ã—Ç–∏–µ: [–æ–ø–∏—Å–∞–Ω–∏–µ]")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        calendar_data = load_data(CALENDAR_FILE)
        if user_id not in calendar_data:
            calendar_data[user_id] = []

        calendar_data[user_id].append({
            'date': date_str,
            'description': description,
            'created_at': str(datetime.now())
        })

        save_data(calendar_data, CALENDAR_FILE)
        await update.message.reply_text("–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        context.user_data['awaiting_event'] = False

async def timer_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–π–º–µ—Ä–∞."""
    keyboard = [
        [InlineKeyboardButton("20 –º–∏–Ω—É—Ç", callback_data='timer_20')],
        [InlineKeyboardButton("40 –º–∏–Ω—É—Ç", callback_data='timer_40')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data='cancel_timer')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ú–µ–Ω—é —Ç–∞–π–º–µ—Ä–∞:', reply_markup=reply_markup)

async def timer_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ —Ç–∞–π–º–µ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == 'timer_20':
        if chat_id in active_timers:
            active_timers[chat_id].cancel()
        active_timers[chat_id] = PomodoroTimer(context, chat_id)
        active_timers[chat_id].start(20)
        await query.edit_message_text(text="20-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    elif query.data == 'timer_40':
        if chat_id in active_timers:
            active_timers[chat_id].cancel()
        active_timers[chat_id] = PomodoroTimer(context, chat_id)
        active_timers[chat_id].start(40)
        await query.edit_message_text(text="40-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    elif query.data == 'cancel_timer':
        if chat_id in active_timers:
            active_timers[chat_id].cancel()
            del active_timers[chat_id]
            await query.edit_message_text(text="–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")
        else:
            await query.edit_message_text(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

async def links_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."""
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_link')],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Å—ã–ª–∫–∏", callback_data='view_links')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='delete_link')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ú–µ–Ω—é –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:', reply_markup=reply_markup)

async def links_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ —Å—Å—ã–ª–æ–∫."""
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    links_data = load_data(LINKS_FILE)

    if query.data == 'add_link':
        context.user_data['awaiting_link'] = True
        await query.edit_message_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–µ—Ç–∞–ª–∏ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: [–∏–º—è]\nURL: [—Å—Å—ã–ª–∫–∞]\n\n–ü—Ä–∏–º–µ—Ä:\n–ù–∞–∑–≤–∞–Ω–∏–µ: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Python\nURL: https://docs.python.org")
    elif query.data == 'view_links':
        if user_id in links_data and links_data[user_id]:
            links_list = "\n\n".join([f"–ù–∞–∑–≤–∞–Ω–∏–µ: {link['title']}\nURL: {link['url']}" for link in links_data[user_id]])
            await query.edit_message_text(text=f"–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n\n{links_list}")
        else:
            await query.edit_message_text(text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
    elif query.data == 'delete_link':
        if user_id in links_data and links_data[user_id]:
            keyboard = [[InlineKeyboardButton(link['title'], callback_data=f"delete_link_{idx}")] 
                       for idx, link in enumerate(links_data[user_id])]
            keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_delete_link')])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        else:
            await query.edit_message_text(text="–£ –≤–∞—Å –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    elif query.data.startswith('delete_link_'):
        idx = int(query.data.split('_')[2])
        del links_data[user_id][idx]
        save_data(links_data, LINKS_FILE)
        await query.edit_message_text(text="–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    elif query.data == 'cancel_delete_link':
        await query.edit_message_text(text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def handle_link_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫."""
    if 'awaiting_link' in context.user_data and context.user_data['awaiting_link']:
        user_id = str(update.message.from_user.id)
        text = update.message.text

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        try:
            title = text.split('–ù–∞–∑–≤–∞–Ω–∏–µ:')[1].split('URL:')[0].strip()
            url = text.split('URL:')[1].strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
            if not (url.startswith('http://') or url.startswith('https://')):
                raise ValueError("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        except Exception as e:
            await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: [–∏–º—è]\nURL: [—Å—Å—ã–ª–∫–∞]\n\n–û—à–∏–±–∫–∞: {str(e)}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        links_data = load_data(LINKS_FILE)
        if user_id not in links_data:
            links_data[user_id] = []

        links_data[user_id].append({
            'title': title,
            'url': url,
            'created_at': str(datetime.now())
        })

        save_data(links_data, LINKS_FILE)
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        context.user_data['awaiting_link'] = False

async def error_handler(update: Update, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if update and update.message:
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = ApplicationBuilder().token("7995131121:AAHmW6AteYi-jh4PfsUpDrNqilv2V1xHLvg").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("calculator", calculator))
    application.add_handler(CommandHandler("cards", cards_command))
    application.add_handler(CommandHandler("translate", translate_command))
    application.add_handler(CommandHandler("calendar", calendar_command))
    application.add_handler(CommandHandler("timer", timer_command))
    application.add_handler(CommandHandler("links", links_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(calculator_callback, pattern='^[0-9+\\-*/.=C‚å´]$'))
    application.add_handler(CallbackQueryHandler(cards_callback, pattern='^(add_card|view_cards|delete_card|delete_\\d+|cancel_delete)$'))
    application.add_handler(CallbackQueryHandler(translate_callback, pattern='^(ru_en|ru_de|ru_zh)$'))
    application.add_handler(CallbackQueryHandler(calendar_callback, pattern='^(add_event|view_events|delete_event|delete_event_\\d+|cancel_delete_event)$'))
    application.add_handler(CallbackQueryHandler(timer_callback, pattern='^(timer_20|timer_40|cancel_timer)$'))
    application.add_handler(CallbackQueryHandler(links_callback, pattern='^(add_link|view_links|delete_link|delete_link_\\d+|cancel_delete_link)$'))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_card_text))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_translation_text))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_event_text))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link_text))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()